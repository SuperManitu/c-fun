Program = {TopLevelStatement} Main {TopLevelStatement};

TopLevelStatement = Declaration | Definition;

Declaration = (CONST | LET | PURE) IDENTIFIER ":" TypeSignature ";";

Definition = Declaration "=" Expression ";";

Expression = Lamda | Term | BooleanExpression;

Lamda = (IDENTIFIER | "()") "=>" (Expression | Block);

Block = "{" [{Declaration | Definition | Statement} | ReturnStatement] "}";

Statement = IfStatement | FunctionCall;

ReturnStatement = RETURN Expression ";";

IfStatement = IF "(" Expression ")" ( [RETURN] Expression | Block) [ELSE ([RETURN] Expression | Block)] ";";

FunctionCall = IDENTIFIER "(" [Expression {"," Expression}] ");";

Term = MultiplicativeTerm {("+" | "-") MultiplicativeTerm};

MultiplicativeTerm = AtomTerm {("*" | "/") AtomTerm};

AtomTerm = "(" Term ")" | IDENTIFIER | NUMBER | FunctionCall;

BooleanExpression = AndExpression {"&&" AndExpression};

AndExpression = BooleanAtom {"||" Boolean};

Comparison = Term [("<=" Term) | (">=" Term) | ("==" Term) | (">" Term) | ("<" Term)];

BooleanAtom = "!" BooleanAtom | TRUE | FALSE | Comparison | FunctionCall;

Main = MAIN [TypeSignature] "=" Lamda;

TypeSignature = ":" Type;

Type = TYPE | TYPE "=>" Type;
